{"version":3,"sources":["../../src/utils/index.js","App.js","../../src/hooks/useToImage.js","index.js"],"names":["utils","defaultDownloadImage","fileName","format","data","link","document","App","pixelRatio","backgroundColor","restOptions","baseRef","ref","useRef","useState","isLoading","error","setRef","useCallback","node","defaultGetter","defaultCallback","a","setState","libFunc","output","newState","callback","getSvg","getJpeg","getPng","getBlob","getPixelData","getCanvas","useToImage","style","display","justifyContent","alignItems","flexDirection","onClick","ReactDOM","render","getElementById"],"mappings":"oSAAaA,EAAQ,CACnBC,sBAAqB,SAAEC,EAAF,kBAAyBC,EAAzB,WAAyCC,IAC5D,IAAMC,EAAOC,uBAAb,KACAD,qBAAmBH,EAAnBG,eACAA,SACAA,YCFW,SAASE,IAAO,IAAD,ECWvB,SACL,EADK,MAGL,IAFA,EAEA,EAFA,IAEA,IAFOC,kBAEP,MAFA,EAEA,MAFuBC,uBAEvB,MAFA,cAEA,EAF2DC,EAE3D,sDACMC,EAAUC,GAAOC,mBADvB,EAE0BC,mBAAS,CACjCC,WADiC,EAEjCC,MAAO,OAJT,mBAEM,EAFN,KAEM,EAFN,KAOMC,EAASC,sBAAaC,IAC1B,GAAIR,YAAJ,EACE,YACSQ,IACTR,cAJJ,IAQMS,EAAgB,CAAC,EAAD,IAIpBC,EAAkBrB,EAJE,6CAKjB,gCAAAsB,EAAA,6DACHC,EAAS,8BAAD,IAAaR,WAAW,KAD7B,kBAIoBS,EAAQZ,IAAG,OAAID,QAAJ,IAAIA,OAAJ,EAAIA,EAAR,sBAA0B,gCAGjDD,IAPJ,OAIKe,EAJL,OAUKC,EAVL,2BAUgB,GAVhB,IAYCX,WAFe,EAGf,IAAYU,IAGdF,KAEII,GAAJ,oBAAuBA,EACrBA,EAAS,8BAEJjB,IAGLW,EAAgB,yBACdlB,OADc,EAEdC,KAFc,MAIXM,IA5BN,kDAgCKgB,EAhCL,2BAgCgB,GAhChB,IAkCCX,WAFe,EAGfC,MAAO,EAAF,KAGPO,KAtCC,0DA0CL,kCAAO,GAAP,IAEEX,IAAKA,GAFA,EAGLgB,OAAQR,EAAc,EAAD,YAHhB,OAILS,QAAST,EAAc,EAAD,YAJjB,QAKLU,OAAQV,EAAc,EAAD,YALhB,OAMLW,QAASX,EAAc,EAAD,YANjB,OAOLY,aAAcZ,EAAc,EAAD,YAPtB,OAQLa,UAAWb,EAAc,EAAD,qBDnFmCc,GAArDtB,EADoB,EACpBA,IAAKG,EADe,EACfA,UAAWa,EADI,EACJA,OAAQE,EADJ,EACIA,OAAQD,EADZ,EACYA,QADZ,+DAG5B,OACE,6BACGd,GAAa,4CACd,yBACEH,IAAKA,EACLuB,MAAO,CACLC,QAAS,OAGTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,WAGjB,+CACA,4BAAQC,QAASZ,GAAjB,gBACA,4BAAQY,QAASX,GAAjB,iBACA,4BAAQW,QAASV,GAAjB,kBEjBRW,IAASC,OAAO,kBAACnC,EAAD,MAASD,SAASqC,eAAe,W","file":"static/js/main.2650132a.chunk.js","sourcesContent":["export const utils = {\n  defaultDownloadImage({ fileName = 'download', format = 'png', data }) {\n    const link = document.createElement('a')\n    link.download = `${fileName}.${format}`\n    link.href = data\n    link.click()\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport { useToImage } from 'react-to-image'\n\nexport default function App() {\n  const { ref, isLoading, getSvg, getPng, getJpeg, ...rest } = useToImage()\n\n  return (\n    <div>\n      {isLoading && <span>loading...</span>}\n      <div\n        ref={ref}\n        style={{\n          display: 'flex',\n          // height: 400,\n          // width: 400,\n          justifyContent: 'center',\n          alignItems: 'center',\n          flexDirection: 'column'\n        }}\n      >\n        <h1>This is a title</h1>\n        <button onClick={getSvg}>Download SVG</button>\n        <button onClick={getJpeg}>Download JPEG</button>\n        <button onClick={getPng}>Download PNG</button>\n      </div>\n    </div>\n  )\n}\n","'use strict'\n\nimport React, { useCallback, useRef, useState, useEffect } from 'react'\nimport {\n  toPng,\n  toJpeg,\n  toBlob,\n  toPixelData,\n  toSvg,\n  toCanvas\n} from 'html-to-image'\n\nimport { utils } from '../utils'\n\nexport function useToImage(\n  { ref, pixelRatio = 1, backgroundColor = 'transparent', ...restOptions } = {},\n  callback\n) {\n  const baseRef = ref || useRef()\n  const [state, setState] = useState({\n    isLoading: false,\n    error: null\n  })\n\n  const setRef = useCallback((node) => {\n    if (baseRef.current || !node) {\n      return null\n    } else if (node) {\n      baseRef.current = node\n    }\n  }, [])\n\n  const defaultGetter = (\n    libFunc,\n    stateKey,\n    defaultFormat,\n    defaultCallback = utils.defaultDownloadImage\n  ) => async () => {\n    setState({ ...state, isLoading: true })\n\n    try {\n      const output = await libFunc(ref || baseRef?.current, {\n        pixelRatio,\n        backgroundColor,\n        ...restOptions\n      })\n\n      const newState = {\n        ...state,\n        isLoading: false,\n        [stateKey]: output\n      }\n\n      setState(newState)\n\n      if (callback && typeof callback === 'function') {\n        callback({\n          ...newState,\n          ...restOptions\n        })\n      } else {\n        defaultCallback({\n          format: defaultFormat,\n          data: output,\n          ...newState,\n          ...restOptions\n        })\n      }\n    } catch (e) {\n      const newState = {\n        ...state,\n        isLoading: false,\n        error: e\n      }\n\n      setState(newState)\n    }\n  }\n\n  return {\n    ...state,\n    ref: ref || setRef,\n    getSvg: defaultGetter(toSvg, 'dataURL', 'svg'),\n    getJpeg: defaultGetter(toJpeg, 'dataURL', 'jpeg'),\n    getPng: defaultGetter(toPng, 'dataURL', 'png'),\n    getBlob: defaultGetter(toBlob, 'dataURL', 'png'),\n    getPixelData: defaultGetter(toPixelData, 'dataURL', 'svg'),\n    getCanvas: defaultGetter(toCanvas, 'dataURL', 'svg')\n  }\n}\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}